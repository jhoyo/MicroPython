# programas para uso del display SSD1306
from machine import Pin, SoftI2C
from time import sleep
import ssd1306 as ssd1306
import framebuf
from onewire import OneWire # importar funciones para protocolo 1-wire 
from ds18x20 import DS18X20 # importar funcion para sensor DS18B20
from bh1750 import BH1750
from bmp280 import BMP280
from ahtx0 import AHT20
from math import log
from sys import exit

i2c = SoftI2C(scl = Pin(22), sda = Pin(21))

devices = i2c.scan()                        # buscar dispositivos conecatados al I2C

if len(devices) == 0:
    print("No hay dispositivos conectados al canal I2C")
    exit(0)

for dev in devices:
    print("dispositivo en la direccion",hex(dev))

# Definición de dispositivos
oled_W = 128                # ancho de la pantalla en puntos
oled_H = 64                 # alto de la pantalla en puntos
oled = ssd1306.SSD1306_I2C(oled_W, oled_H, i2c)
luz = BH1750(i2c)
bmp = BMP280(i2c)
trh = AHT20(i2c)
DS = Pin(4)                 # conexion al DS18B20
sensor = DS18X20(OneWire(DS))

# codigo para icono de termometro
t = [0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x18, 0x04, 0x20, 0x00, 0x18,
     0x04, 0x38, 0x00, 0x3C, 0x04, 0x20, 0x00, 0x24, 0x04, 0x30, 0x00, 0x66, 0x04, 0x30, 0x00, 0x24,
     0x04, 0x20, 0x00, 0x3C, 0x05, 0xB8, 0x00, 0x00, 0x05, 0xA0, 0x06, 0x00, 0x05, 0xA0, 0x0E, 0x00,
     0x05, 0xB0, 0x0B, 0x00, 0x05, 0xA0, 0x19, 0x00, 0x05, 0xB8, 0x11, 0x80, 0x05, 0xA0, 0x11, 0x80,
     0x05, 0xA0, 0x1B, 0x00, 0x0D, 0xA0, 0x0E, 0x00, 0x19, 0xB8, 0x00, 0x18, 0x31, 0x8C, 0x00, 0x18,
     0x21, 0x84, 0x00, 0x24, 0x67, 0xC6, 0x00, 0x66, 0x47, 0xE2, 0x00, 0x42, 0x47, 0xE2, 0x00, 0x42,
     0x47, 0xE2, 0x00, 0x42, 0x47, 0xC6, 0x00, 0x7E, 0x61, 0x84, 0x00, 0x18, 0x30, 0x0C, 0x00, 0x00,
     0x18, 0x18, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
t1 = bytearray(t)
termometro = framebuf.FrameBuffer(t1, 32, 32, framebuf.MONO_HLSB)

# codigo para icono de iluminiación (foco)
f = [0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x81, 0x81, 0x00, 0x00, 0x81, 0x81, 0x00,
     0x00, 0xC1, 0x83, 0x00, 0x00, 0x41, 0x82, 0x00, 0x00, 0x61, 0x86, 0x00, 0x00, 0x20, 0x04, 0x00,
     0x60, 0x03, 0xC0, 0x06, 0x38, 0x1F, 0xF8, 0x1C, 0x0C, 0x20, 0x0C, 0x30, 0x02, 0x61, 0xE6, 0x40,
     0x00, 0x40, 0x32, 0x00, 0x00, 0xC0, 0x19, 0x00, 0x00, 0x80, 0x09, 0x00, 0x00, 0x80, 0x09, 0x00,
     0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00,
     0x00, 0xC0, 0x03, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x30, 0x0C, 0x00,
     0x00, 0x10, 0x08, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x1F, 0xB8, 0x00,
     0x00, 0x01, 0x08, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x1F, 0xF8, 0x00
    ]
f1 = bytearray(f)
foco = framebuf.FrameBuffer(f1, 32, 32, framebuf.MONO_HLSB)

# codigo para icono de gota (humedad)
h = [0x00, 0x08, 0x06, 0x00, 0x00, 0x14, 0x0A, 0x00, 0x00, 0x32, 0x09, 0x00, 0x00, 0x61, 0x10, 0x80,
     0x00, 0xC1, 0xA0, 0x40, 0x00, 0x80, 0xE0, 0x60, 0x01, 0x80, 0x40, 0x30, 0x03, 0x00, 0x20, 0x10,
     0x06, 0x00, 0x30, 0x18, 0x04, 0x00, 0x10, 0x08, 0x0c, 0x00, 0x08, 0x0C, 0x08, 0x00, 0x0C, 0x04,
     0x18, 0x00, 0x04, 0x04, 0x10, 0x00, 0x06, 0x06, 0x30, 0x00, 0x02, 0x06, 0x20, 0x00, 0x02, 0x02,
     0x20, 0x00, 0x03, 0x06, 0x60, 0x00, 0x01, 0x06, 0x60, 0x00, 0x01, 0x06, 0x60, 0x00, 0x01, 0x04,
     0x42, 0x00, 0x01, 0x08, 0x42, 0x00, 0x01, 0x18, 0x61, 0x00, 0x01, 0x70, 0x61, 0x00, 0x01, 0xC0,
     0x20, 0x80, 0x03, 0x00, 0x30, 0x60, 0x02, 0x00, 0x10, 0x38, 0x06, 0x00, 0x18, 0x00, 0x0C, 0x00,
     0x0C, 0x00, 0x10, 0x00, 0x06, 0x00, 0x30, 0x00, 0x03, 0x80, 0xE0, 0x00, 0x00, 0xFF, 0x80, 0x00
    ]
h1 = bytearray(h)
humedad = framebuf.FrameBuffer(h1, 32, 32, framebuf.MONO_HLSB)

# codigo para icono de abanico
a = [0x00, 0x07, 0xF0, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x20, 0x0C, 0x00,
     0x00, 0x30, 0x06, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00, 0x0C, 0x06, 0x00,
     0x00, 0x06, 0x0C, 0x00, 0x0F, 0x06, 0x0C, 0x00, 0x3F, 0xE3, 0x0C, 0x3C, 0x60, 0x73, 0xD8, 0x76,
     0xC0, 0x1F, 0xF8, 0xC6, 0xC0, 0x0C, 0x33, 0xC3, 0xC0, 0x19, 0x9F, 0x03, 0xC0, 0x1B, 0xDC, 0x03,
     0xC0, 0x3B, 0xD8, 0x03, 0xC0, 0xF9, 0x98, 0x03, 0xC1, 0xDC, 0x38, 0x03, 0x67, 0x9F, 0xF8, 0x07,
     0x6E, 0x1B, 0xDE, 0x06, 0x3C, 0x30, 0xC3, 0xFC, 0x10, 0x30, 0xE1, 0xF8, 0x00, 0x60, 0x60, 0x00,
     0x00, 0x60, 0x30, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x60, 0x0C, 0x00,
     0x00, 0x20, 0x0C, 0x00, 0x00, 0x30, 0x0C, 0x00, 0x00, 0x3C, 0x38, 0x00, 0x00, 0x0F, 0xE0, 0x00
    ]
a1 = bytearray(a)
abanico = framebuf.FrameBuffer(a1, 32, 32, framebuf.MONO_HLSB)

# funciones 
def centigrados(rom):
    sensor.convert_temp()   # iniciar el convertidor de temperatura DS18B20
    sleep(0.75)             # esperar a completar la conversion
    return sensor.read_temp(rom)
 
def farenheit(rom):
    t = centigrados(rom)
    return (t*9/5)+32

def IC(t,rh):
    t2 = t*t
    rh2 = rh*rh
    ic = -8.784694756 + 1.61139411*t + 2.338548839*rh - 0.14611605*t*rh - 0.012308094*t2 - 0.016424828*rh2 + 0.002211732*t2*rh + 0.00072546*t*rh2 - 0.000003582*t2*rh2
    return f"{ic:.4f}"

def rocio(t,rh):
    a1 = log(rh/100) + 17.625*t/(243.04+t)
    Ts = (243.04*a1/(17.625-a1))
    return Ts

# funcion principal
def main():
    roms = sensor.scan()     # buscar direccion del sensor DS18B20
    if len(roms) == 0:
        print("NO hay ningun DS18B20 conectado al ESP32")
        exit(0)
    rom = roms[0]
    
    while True:
        # Desplegado de temperatura
        oled.blit(termometro,0,20)
        oled.fill_rect(60,18, 45,30,0)
        
        t = centigrados(rom)
        f = farenheit(rom)
        
        # Desplegar valor de temperatura con dos decimales.
        oled.text(str('T: ' +"{:0.2f}".format(t)+ "  C",2),40,19)
        # Desplegar valor de temperatura con dos decimales.
        oled.text(str('T: ' +"{:0.2f}".format(f)+ "  F",2),40,39)
        # dibujar simbolo de grado, un cuadrado de 4x4.
        oled.fill_rect(113, 18, 4,4, 1)
        oled.fill_rect(113, 38, 4,4, 1)
        oled.show()
        sleep(2)
        
        # Desplegar iluminación
        oled.blit(foco,0,20)
        oled.fill_rect(35,18, 95,30,0)
        l1 = luz.luminance(BH1750.ONCE_HIRES_2) # resolucion de 0.5lx
        oled.text(str('L:' +"{:5.2f}".format(l1)+ " lx",2),35,29)
        oled.show()
        sleep(5)
        
        # Desplegar humedad
        oled.blit(humedad,0,20)
        oled.fill_rect(35,18, 95,30,0)
        t2 = trh.temperature
        hume = trh.relative_humidity
        # Desplegar valor de temperatura con dos decimales.
        oled.text(str('T: ' +"{:0.2f}".format(t2)+ "  C",2),40,19)
        # Desplegar valor de temperatura con dos decimales.
        oled.text(str('T: ' +"{:0.2f}".format(hume)+ " %",2),40,39)
        # dibujar simbolo de grado, un cuadrado de 4x4.
        oled.fill_rect(113, 18, 4,4, 1)
        oled.show()
        sleep(5)
        
        # Desplegar punto de rocio e indice de calor
        oled.blit(abanico,0,20)
        oled.fill_rect(35,18, 95,30,0)
        pr = rocio(t2, hume)
        ic = IC(t2, hume)
         # Desplegar valor de temperatura con dos decimales.
        oled.text(str('PR: ' +"{:0.2f}".format(t)+ "  C",2),40,19)
        # Desplegar valor de temperatura con dos decimales.
        oled.text(str('IC: ' +"{:0.2f}".format(f)+ "  C",2),40,39)
        # dibujar simbolo de grado, un cuadrado de 4x4.
        oled.fill_rect(113, 18, 4,4, 1)
        oled.fill_rect(113, 38, 4,4, 1)
        oled.show()
        sleep(5)
    oled.poweroff()

if __name__ == "__main__":
    main()